AWSTemplateFormatVersion: '2010-09-09'
Description: Ops Automator, template version %version%, (SO0029)
Mappings:
  Send:
    AnonymousUsage:
      Data: 'Yes'
  Settings:
    Names:
      CloudTrailRdsEventRule: OpsAutomatorCloudTrailRdsEventRule
      CloudWatchQueueHandlerLambdaFunction: OpsAutomatorCloudWatchQueueHandler
      ConfigurationBucket: ''
      EbsSnapshotEventRule: OpsAutomatorEbsSnapshotEventRule
      Ec2StateEventRule: OpsAutomatorEc2StateEventRule
      EventsTopic: EventsTopic
      EventsTopicDisplayName: OpsAutomatorEvents
      IssuesTopic: IssuesTopic
      IssuesTopicDisplayName: Issues
      LogQueueName: OpsAutomatorCloudWatchLogQueue
      NotificationsTopic: NotificationsTopic
      NotificationsTopicDisplayName: Notifications
      OpsAutomatorCompletionRule: OpsAutomatorCompletionRule
      OpsAutomatorLambdaFunction: OpsAutomator
      OpsAutomatorRule: OpsAutomatorRule
      ReportingBucket: ''
      ResourcesBucket: ''
      TaggingEventRule: OpsAutomatorTaggingEventRule
    Metrics:
      Url: https://metrics.awssolutionsbuilder.com/generic
      SolutionId: S00029
    Templates:
      OptimizeCrossAccountTemplate: 'True'
    ActionMemory:
      Standard: '128'
      Medium: '256'
      Large: '512'
      XLarge: '1024'
      XXLarge: '2048'
      XXXLarge: '3008'
      ECS: ''
    EcsCluster:
      ClusterName: ''
    Resources:
      ResourceToS3SizeKB: 16
      EncryptResourceData: 'False'
    ServiceLimits:
      MaxConcurrentEbsSnapshotCopies: 5
      MaxConcurrentRdsSnapshotCopies: 5
      MaxConcurrentImageCopies: 25
    CloudWatchApiLimits:
      MaxPutCallsPerStream: 5
      MaxDescribeCalls: 5
      MaxApiCalls: 40
  EnabledDisabled:
    'Yes':
      Value: ENABLED
    'No':
      Value: DISABLED
  YesNoBoolean:
    'Yes':
      Value: 'True'
    'No':
      Value: 'False'
Parameters:
  TagName:
    Type: String
    Default: OpsAutomatorTaskList
    MinLength: 1
    MaxLength: 127
    Description: Default name of tag that contains the list of tasks for a tagged
      resources.
  EnableTaskCleanup:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Enable cleanup of task tracking table.
  EnableTaskExport:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Enable S3 export of task tracking table.
  RetainFailedTasks:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Do not delete failed tasks.
  UseCloudWatchMetrics:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Collect CloudWatch metrics data for Ops Automator. Detailed metrics
      for individual tasks can be configured at task level.
  TaskRetentionHours:
    Type: Number
    MinValue: 1
    Default: 168
    Description: Number of hours after which tasks are deleted.
  LogRetentionDays:
    Type: Number
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    Description: Retention days for Ops Automator logs.
  ConfigBackupDays:
    Type: Number
    Default: 30
    MinValue: 1
    Description: Retention days for Ops Automator configuration backups.
  SchedulerActive:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Activate or deactivate scheduling of task.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Ops Automator (version %version%)
        Parameters:
          - TagName
          - UseCloudWatchMetrics
          - SchedulerActive
      - Label:
          default: Maintenance
        Parameters:
          - EnableTaskCleanup
          - EnableTaskExport
          - TaskRetentionHours
          - RetainFailedTasks
          - LogRetentionDays
          - ConfigBackupDays
    ParameterLabels:
      EnableTaskCleanup:
        default: Cleanup Task Tracking Table
      EnableTaskExport:
        default: Export Task Tracking Table to Amazon S3
      RetainFailedTasks:
        default: Keep failed tasks
      SchedulerActive:
        default: Scheduling active
      TagName:
        default: TaskScheduler Tagname
      TaskRetentionHours:
        default: Hours to keep tasks
      ConfigBackupDays:
        default: Days to keep configuration backups
      UseCloudWatchMetrics:
        default: Enable CloudWatch Metrics
Conditions:
  CustomConfigBucketName: !Not
    - !Equals
      - !FindInMap
        - Settings
        - Names
        - ConfigurationBucket
      - ''
  CustomReportingBucketName: !Not
    - !Equals
      - !FindInMap
        - Settings
        - Names
        - ReportingBucket
      - ''
  CustomResourcesBucketName: !Not
    - !Equals
      - !FindInMap
        - Settings
        - Names
        - ResourcesBucket
      - ''
  EnableTaskCleanupCondition: !Equals
    - !Ref 'EnableTaskCleanup'
    - 'Yes'
  EnableTaskExportCondition: !Equals
    - !Ref 'EnableTaskExport'
    - 'Yes'
  KeepFailedTasksCondition: !Equals
    - !Ref 'RetainFailedTasks'
    - 'Yes'
  EncryptResourceData: !Equals
    - !FindInMap
      - Settings
      - Resources
      - EncryptResourceData
    - 'True'
  UseEcs: !Not
    - !Equals
      - !FindInMap
        - Settings
        - EcsCluster
        - ClusterName
      - ''
  CloudWatchPutLimit800: !Or
    - !Equals
      - !Ref 'AWS::Region'
      - ap-south-1
    - !Equals
      - !Ref 'AWS::Region'
      - ap-northeast-1
    - !Equals
      - !Ref 'AWS::Region'
      - ap-northeast-2
    - !Equals
      - !Ref 'AWS::Region'
      - ap-southeast-1
    - !Equals
      - !Ref 'AWS::Region'
      - ap-southeast-2
    - !Equals
      - !Ref 'AWS::Region'
      - eu-central-1
    - !Equals
      - !Ref 'AWS::Region'
      - eu-west-2
    - !Equals
      - !Ref 'AWS::Region'
      - sa-east-1
    - !Equals
      - !Ref 'AWS::Region'
      - us-east-2
    - !Equals
      - !Ref 'AWS::Region'
      - us-west-1
    - !Equals
      - !Ref 'AWS::Region'
      - us-gov-west-1
  FifoQueue: !Or
    - !Equals
      - !Ref 'AWS::Region'
      - eu-west-1
    - !Equals
      - !Ref 'AWS::Region'
      - ap-northeast-1
    - !Equals
      - !Ref 'AWS::Region'
      - ap-southeast-2
    - !Equals
      - !Ref 'AWS::Region'
      - us-east-1
    - !Equals
      - !Ref 'AWS::Region'
      - us-east-2
    - !Equals
      - !Ref 'AWS::Region'
      - us-west-2
    - !Equals
      - !Ref 'AWS::Region'
      - us-gov-west-1
  NoFifoQueue: !Not
    - !Condition 'FifoQueue'
Resources:
  OpsAutomatorEventsForwardRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: OpsAutomatorEventForwardRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref 'OpsAutomatorEventsTopic'
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
  OpsAutomatorCloudWatchLogHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: OpsAutomatorCloudWatchHandlerRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource:
                  - !GetAtt 'TriggerTable.StreamArn'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !Join
                    - ''
                    - - !Join
                        - ':'
                        - - !Sub arn:${AWS::Partition}:dynamodb
                          - !Ref 'AWS::Region'
                          - !Ref 'AWS::AccountId'
                          - table/
                      - !Ref 'TriggerTable'
              - Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                Resource:
                  - '*'
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
  OpsAutomatorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: dynamodb.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: OpsAutomatorLambdaRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutRetentionPolicy
                Resource:
                  - '*'
              - Effect: Allow
                Action: dynamodb:ListTables
                Resource:
                  - '*'
              - Effect: Allow
                Action: tag:GetResources
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref 'OpsAutomatorIssuesTopic'
                  - !Ref 'OpsAutomatorNotificationsTopic'
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:RemovePermission
                  - sns:AddPermission
                  - sns:GetTopicAttributes
                  - sns:Subscribe
                Resource:
                  - !Ref 'OpsAutomatorEventsTopic'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:s3:::${Name}/*
                    - Name: !Ref 'TaskResources'
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:s3:::${Name}/*
                    - Name: !Ref 'Reporting'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                Resource:
                  - !Join
                    - ''
                    - - !Join
                        - ':'
                        - - !Sub arn:${AWS::Partition}:dynamodb
                          - !Ref 'AWS::Region'
                          - !Ref 'AWS::AccountId'
                          - table/
                      - !Ref 'TaskTrackingTable'
                  - !Join
                    - ''
                    - - !Join
                        - ':'
                        - - !Sub arn:${AWS::Partition}:dynamodb
                          - !Ref 'AWS::Region'
                          - !Ref 'AWS::AccountId'
                          - table/
                      - !Ref 'TaskTrackingTable'
                      - /index/*
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                Resource:
                  - !Join
                    - ''
                    - - !Join
                        - ':'
                        - - !Sub arn:${AWS::Partition}:dynamodb
                          - !Ref 'AWS::Region'
                          - !Ref 'AWS::AccountId'
                          - table/
                      - !Ref 'ConfigurationTable'
              - Sid: ConcurrencyTableAccess
                Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                Resource:
                  - !Join
                    - ''
                    - - !Join
                        - ':'
                        - - !Sub arn:${AWS::Partition}:dynamodb
                          - !Ref 'AWS::Region'
                          - !Ref 'AWS::AccountId'
                          - table/
                      - !Ref 'ConcurrencyTable'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Join
                    - ''
                    - - !Join
                        - ':'
                        - - !Sub arn:${AWS::Partition}:dynamodb
                          - !Ref 'AWS::Region'
                          - !Ref 'AWS::AccountId'
                          - table/
                      - !Ref 'LastSchedulerExecutionTable'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !Join
                    - ''
                    - - !Join
                        - ':'
                        - - !Sub arn:${AWS::Partition}:dynamodb
                          - !Ref 'AWS::Region'
                          - !Ref 'AWS::AccountId'
                          - table/
                      - !Ref 'TriggerTable'
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource:
                  - !GetAtt 'TaskTrackingTable.StreamArn'
              - Effect: Allow
                Action:
                  - events:EnableRule
                  - events:DisableRule
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}-${Rule}
                    - Rule: !FindInMap
                        - Settings
                        - Names
                        - OpsAutomatorRule
                  - !Sub
                    - arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}-${Rule}
                    - Rule: !FindInMap
                        - Settings
                        - Names
                        - OpsAutomatorCompletionRule
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:ListRules
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudformation:ListStackResources
                Resource:
                  - !Ref 'AWS::StackId'
              - Effect: Allow
                Action:
                  - pricing:GetAttributeValues
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudformation:GetTemplate
                  - cloudformation:ListStackResources
                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
              - Effect: Allow
                Action:
                  - cloudformation:DeleteStack
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                Resource:
                  - !Join
                    - ':'
                    - - !Sub arn:${AWS::Partition}:lambda
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - function
                      - !Join
                        - '-'
                        - - !Ref 'AWS::StackName'
                          - !FindInMap
                            - Settings
                            - Names
                            - OpsAutomatorLambdaFunction
                          - Standard
                  - !Join
                    - ':'
                    - - !Sub arn:${AWS::Partition}:lambda
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - function
                      - !Join
                        - '-'
                        - - !Ref 'AWS::StackName'
                          - !FindInMap
                            - Settings
                            - Names
                            - OpsAutomatorLambdaFunction
                          - Medium
                  - !Join
                    - ':'
                    - - !Sub arn:${AWS::Partition}:lambda
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - function
                      - !Join
                        - '-'
                        - - !Ref 'AWS::StackName'
                          - !FindInMap
                            - Settings
                            - Names
                            - OpsAutomatorLambdaFunction
                          - Large
                  - !Join
                    - ':'
                    - - !Sub arn:${AWS::Partition}:lambda
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - function
                      - !Join
                        - '-'
                        - - !Ref 'AWS::StackName'
                          - !FindInMap
                            - Settings
                            - Names
                            - OpsAutomatorLambdaFunction
                          - XLarge
                  - !Join
                    - ':'
                    - - !Sub arn:${AWS::Partition}:lambda
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - function
                      - !Join
                        - '-'
                        - - !Ref 'AWS::StackName'
                          - !FindInMap
                            - Settings
                            - Names
                            - OpsAutomatorLambdaFunction
                          - XXLarge
                  - !Join
                    - ':'
                    - - !Sub arn:${AWS::Partition}:lambda
                      - !Ref 'AWS::Region'
                      - !Ref 'AWS::AccountId'
                      - function
                      - !Join
                        - '-'
                        - - !Ref 'AWS::StackName'
                          - !FindInMap
                            - Settings
                            - Names
                            - OpsAutomatorLambdaFunction
                          - XXXLarge
                Sid: OpsAutomatorLambdaInvoke
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                  - iam:PassRole
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${AWS::StackName}-ops-automator-task:*'
              - Effect: Allow
                Sid: Ec2ArchiveSnapshot
                Action:
                  - ec2:RunInstances
                  - ec2:TerminateInstance
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeImages
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcEndpoints
                  - ec2:DescribeRouteTables
                  - ec2:DescribeNatGateways
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - '*'
              - Action:
                  - None:None
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStacks
                  - cloudformation:GetTemplateSummary
                  - cloudformation:SetStackPolicy
                  - cloudformation:UpdateStack
                  - cloudwatch:GetMetricData
                  - dynamodb:BatchWriteItem
                  - dynamodb:CreateBackup
                  - dynamodb:DeleteBackup
                  - dynamodb:DescribeBackup
                  - dynamodb:DescribeTable
                  - dynamodb:ListBackups
                  - dynamodb:ListTables
                  - dynamodb:ListTagsOfResource
                  - dynamodb:Scan
                  - dynamodb:TagResource
                  - dynamodb:UntagResource
                  - dynamodb:UpdateTable
                  - ec2:CopyImage
                  - ec2:CopySnapshot
                  - ec2:CreateImage
                  - ec2:CreateSnapshot
                  - ec2:CreateTags
                  - ec2:DeleteSnapshot
                  - ec2:DeleteTags
                  - ec2:DeregisterImage
                  - ec2:DescribeAddresses
                  - ec2:DescribeImages
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceCreditSpecifications
                  - ec2:DescribeInstances
                  - ec2:DescribeSnapshots
                  - ec2:DescribeTags
                  - ec2:DescribeVolumes
                  - ec2:ModifyImageAttribute
                  - ec2:ModifyInstanceAttribute
                  - ec2:ModifyInstanceCreditSpecification
                  - ec2:ModifySnapshotAttribute
                  - ec2:RebootInstances
                  - ec2:ReleaseAddress
                  - ec2:RunInstances
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - ec2:TerminateInstances
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeTags
                  - elasticloadbalancing:DescribeTargetGroupAttributes
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                  - iam:GetRole
                  - iam:PassRole
                  - kms:DescribeKey
                  - rds:AddTagsToResource
                  - rds:CopyDBClusterSnapshot
                  - rds:CopyDBSnapshot
                  - rds:CreateDBClusterSnapshot
                  - rds:CreateDBSnapshot
                  - rds:DeleteDBCluster
                  - rds:DeleteDBClusterSnapshot
                  - rds:DeleteDBInstance
                  - rds:DeleteDBSnapshot
                  - rds:DescribeDBClusterSnapshots
                  - rds:DescribeDBClusters
                  - rds:DescribeDBInstances
                  - rds:DescribeDBSnapshots
                  - rds:DescribeDbClusterSnapshots
                  - rds:DescribeDbClusters
                  - rds:DescribeDbInstances
                  - rds:DescribeDbSnapshots
                  - rds:ListTagsForResource
                  - rds:ModifyDBClusterSnapshotAttribute
                  - rds:ModifyDBSnapshotAttribute
                  - rds:ModifyDBsnapshotAttribute
                  - rds:RebootDBInstance
                  - rds:RemoveTagsFromResource
                  - rds:StartDBCluster
                  - rds:StartDBInstance
                  - rds:StopDBCluster
                  - rds:StopDBInstance
                  - redshift:AuthorizeSnapshotAccess
                  - redshift:CreateClusterSnapshot
                  - redshift:CreateTags
                  - redshift:DeleteClusterSnapshot
                  - redshift:DeleteTags
                  - redshift:DescribeClusterSnapshots
                  - redshift:DescribeClusters
                  - redshift:DescribeTags
                  - redshift:RevokeSnapshotAccess
                  - s3:GetObject
                  - s3:PutObject
                  - ssm:GetCommandInvocation
                  - ssm:SendCommand
                  - storagegateway:AddTagsToResource
                  - storagegateway:CreateSnapshot
                  - storagegateway:ListTagsForResource
                  - storagegateway:ListVolumes
                  - storagegateway:RemoveTagsFromResource
                  - tag:GetResources
                Resource: '*'
                Effect: Allow
                Sid: ActionPermissions
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
  LastSchedulerExecutionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  ConfigurationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  TaskTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: ConcurrencyId
          AttributeType: S
        - AttributeName: LastCompletionCheck
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: !If
          - EnableTaskCleanupCondition
          - 'True'
          - 'False'
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
        - IndexName: WaitForExecutionTasks
          KeySchema:
            - AttributeName: ConcurrencyId
              KeyType: HASH
            - AttributeName: Id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: WaitForCompletionTasks
          KeySchema:
            - AttributeName: Id
              KeyType: HASH
            - AttributeName: LastCompletionCheck
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  ConcurrencyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ConcurrencyId
          AttributeType: S
      KeySchema:
        - AttributeName: ConcurrencyId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  TriggerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: KEYS_ONLY
  OpsAutomatorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - logs
      RetentionInDays: !Ref 'LogRetentionDays'
  OpsAutomatorIssuesTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - IssuesTopicDisplayName
      TopicName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - IssuesTopic
  OpsAutomatorNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - NotificationsTopicDisplayName
      TopicName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - NotificationsTopic
  OpsAutomatorEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - EventsTopicDisplayName
      TopicName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - EventsTopic
  OpsAutomatorEventsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F18
            reason: '* is used as Account pseudo variable cannot be used, access is
              restricted by condition'
    Properties:
      Topics:
        - !Ref 'OpsAutomatorEventsTopic'
      PolicyDocument:
        Version: '2008-10-17'
        Id: default_policy
        Statement:
          - Sid: default_sid
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:Publish
              - SNS:Receive
            Resource: !Ref 'OpsAutomatorEventsTopic'
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref 'AWS::AccountId'
          - Sid: publish_sid_events
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: SNS:Publish
            Resource: !Ref 'OpsAutomatorEventsTopic'
          - Sid: publish_sid_s3
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: SNS:Publish
            Resource: !Ref 'OpsAutomatorEventsTopic'
          - Sid: subscribe_sid
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action:
              - SNS:Subscribe
              - SNS:Receive
            Resource: !Ref 'OpsAutomatorEventsTopic'
  OpsAutomatorLambdaFunctionStandard:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: %bucket%
        S3Key: ops-automator/%version%/ops-automator-%version%.zip
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          - Standard
      Handler: main.lambda_handler
      Runtime: python2.7
      Role: !GetAtt 'OpsAutomatorLambdaRole.Arn'
      Environment:
        Variables:
          LAST_SCHEDULER_RUN_TABLE: !Ref 'LastSchedulerExecutionTable'
          RESOURCE_BUCKET: !Ref 'TaskResources'
          RESOURCE_TO_S3_SIZE: !FindInMap
            - Settings
            - Resources
            - ResourceToS3SizeKB
          ACTION_TRACKING_TABLE: !Ref 'TaskTrackingTable'
          CONFIG_TABLE: !Ref 'ConfigurationTable'
          CONFIG_BUCKET: !Ref 'Configuration'
          REPORTING_BUCKET: !Ref 'Reporting'
          CONCURRENCY_TABLE: !Ref 'ConcurrencyTable'
          TASKLIST_TAG_NAME: !Ref 'TagName'
          LOG_GROUP: !Ref 'OpsAutomatorLogGroup'
          CLOUDWATCH_TRIGGER_TABLE: !Ref 'TriggerTable'
          LOGGING_QUEUE_URL: !Ref 'OpsAutomatorCloudWatchQueue'
          LAMBDA_NAME: !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          STACK_NAME: !Ref 'AWS::StackName'
          STACK_ID: !Ref 'AWS::StackId'
          OPS_AUTOMATOR_ACCOUNT: !Ref 'AWS::AccountId'
          OPS_AUTOMATOR_ROLE_ARN: !GetAtt 'OpsAutomatorLambdaRole.Arn'
          LAMBDA_TIMEOUT: 900
          TASK_CLEANUP_ENABLED: !If
            - EnableTaskCleanupCondition
            - 'True'
            - 'False'
          TASK_RETENTION_HOURS: !Ref 'TaskRetentionHours'
          KEEP_FAILED_TASKS: !If
            - KeepFailedTasksCondition
            - 'True'
            - 'False'
          USER_AGENT: !Join
            - '-'
            - - OpsAutomator
              - !Ref 'AWS::StackName'
              - '%version%'
          SEND_METRICS: !FindInMap
            - YesNoBoolean
            - !FindInMap
              - Send
              - AnonymousUsage
              - Data
            - Value
          OPS_AUTOMATOR_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorRule
          COMPLETION_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorCompletionRule
          SNS_ISSUES_TOPIC_ARN: !Ref 'OpsAutomatorIssuesTopic'
          SNS_RESULT_TOPIC_ARN: !Ref 'OpsAutomatorNotificationsTopic'
          EVENTS_TOPIC_ARN: !Ref 'OpsAutomatorEventsTopic'
          BOTO_RETRY_STATS: 'False'
          BOTO_RETRY_OUTPUT: 'False'
          CLOUDWATCH_METRICS: !FindInMap
            - YesNoBoolean
            - !Ref 'UseCloudWatchMetrics'
            - Value
          USE_ECS: !If
            - UseEcs
            - 'True'
            - 'False'
          ECS_CLUSTER: !If
            - UseEcs
            - !FindInMap
              - Settings
              - EcsCluster
              - ClusterName
            - !Ref 'AWS::NoValue'
          ECS_OPS_AUTOMATOR_TASK: !If
            - UseEcs
            - !Ref 'OpsAutomatorTask'
            - ''
          DEBUG_TASK_TRACKING_HANDLER: 'False'
          DEBUG_MAIN_EVENT_HANDLER: 'False'
          DEBUG_EVENT_HANDLERS: 'False'
          RESOURCE_ENCRYPTION_KEY: !If
            - EncryptResourceData
            - !Ref 'ResourceEncryptionKey'
            - ''
          SERVICE_LIMIT_CONCURRENT_EBS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentEbsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_RDS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentRdsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_IMAGE_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentImageCopies
          SOLUTION_ID: !FindInMap
            - Settings
            - Metrics
            - SolutionId
          METRICS_URL: !FindInMap
            - Settings
            - Metrics
            - Url
      MemorySize: !FindInMap
        - Settings
        - ActionMemory
        - Standard
      Timeout: '900'
      Description: Ops Automator (Standard, Memory 128 MB), version %version%
    DependsOn:
      - OpsAutomatorLambdaRole
  OpsAutomatorCloudWatchQueueHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: %bucket%
        S3Key: ops-automator/%version%/cloudwatch-handler-%version%.zip
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - CloudWatchQueueHandlerLambdaFunction
      Handler: cloudwatch_queue_handler_lambda.lambda_handler
      Runtime: python2.7
      Role: !GetAtt 'OpsAutomatorCloudWatchLogHandlerRole.Arn'
      Environment:
        Variables:
          CWL_LIMIT_PUT_CALLS_PER_STREAM: !FindInMap
            - Settings
            - CloudWatchApiLimits
            - MaxPutCallsPerStream
          CWL_LIMIT_PUT_CALLS_PER_ACCOUNT: !If
            - CloudWatchPutLimit800
            - 800
            - 1500
          CWL_LIMIT_API_CALLS: !FindInMap
            - Settings
            - CloudWatchApiLimits
            - MaxApiCalls
          LOGGING_QUEUE_URL: !Ref 'OpsAutomatorCloudWatchQueue'
          CLOUDWATCH_TRIGGER_TABLE: !Ref 'TriggerTable'
          LOG_GROUP: !Ref 'OpsAutomatorLogGroup'
      MemorySize: 128
      Timeout: '900'
      Description: Ops Automator CloudWatch Queue Handler, version %version%
    DependsOn:
      - OpsAutomatorCloudWatchLogHandlerRole
      - OpsAutomatorCloudWatchQueue
  OpsAutomatorEventsTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      Protocol: lambda
      TopicArn: !Ref 'OpsAutomatorEventsTopic'
  OpsAutomatorTask:
    Type: AWS::ECS::TaskDefinition
    Condition: UseEcs
    Properties:
      Family: !Sub '${AWS::StackName}-ops-automator-task'
      ContainerDefinitions:
        - Essential: true
          Environment:
            - Name: IS_ECS_JOB
              Value: 'True'
            - Name: SUPPRESS_LOG_TO_STDOUT
              Value: 'True'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'OpsAutomatorLogGroup'
              awslogs-stream-prefix: Ecs
              awslogs-region: !Ref 'AWS::Region'
          Name: ops-automator
          Image: !Sub
            - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${repository}:latest
            - repository: !Ref 'OpsAutomatorEcsRepository'
          MemoryReservation: 128
      TaskRoleArn: !GetAtt 'OpsAutomatorLambdaRole.Arn'
      Volumes: []
  Configuration:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !If
        - CustomConfigBucketName
        - !FindInMap
          - Settings
          - Names
          - ConfigurationBucket
        - !Ref 'AWS::NoValue'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: !Ref 'ConfigBackupDays'
            Prefix: Backups/
            Status: Enabled
  Reporting:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !If
        - CustomReportingBucketName
        - !FindInMap
          - Settings
          - Names
          - ReportingBucket
        - !Ref 'AWS::NoValue'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  OpsAutomatorCloudWatchQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: !If
        - FifoQueue
        - 'True'
        - !Ref 'AWS::NoValue'
      MessageRetentionPeriod: 86400
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 300
      QueueName: !Join
        - ''
        - - !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - LogQueueName
          - !If
            - FifoQueue
            - .fifo
            - ''
  OpsAutomatorCloudWatchQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: OpsAutomatorPutPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSendMessage
            Effect: Allow
            Principal:
              AWS: !GetAtt 'OpsAutomatorLambdaRole.Arn'
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt 'OpsAutomatorCloudWatchQueue.Arn'
          - Sid: AllowReceiveMessage
            Effect: Allow
            Principal:
              AWS: !GetAtt 'OpsAutomatorCloudWatchLogHandlerRole.Arn'
            Action:
              - sqs:DeleteMessage
              - sqs:ReceiveMessage
            Resource:
              - !GetAtt 'OpsAutomatorCloudWatchQueue.Arn'
      Queues:
        - !Ref 'OpsAutomatorCloudWatchQueue'
  TaskResources:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !If
        - CustomResourcesBucketName
        - !FindInMap
          - Settings
          - Names
          - ResourcesBucket
        - !Ref 'AWS::NoValue'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  OpsAutomatorInvokePermissionDynamodb:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      Action: lambda:InvokeFunction
      Principal: dynamodb.amazonaws.com
  CloudWatchHandlerInvokePermissionDynamodb:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'OpsAutomatorCloudWatchQueueHandlerLambda.Arn'
      Action: lambda:InvokeFunction
      Principal: dynamodb.amazonaws.com
  InvokePermissionSNS:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'OpsAutomatorEventsTopic'
  InvokePermissionCloudWatchEvents:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 'OpsAutomatorRule.Arn'
  InvokePermissionCloudWatchEventsCompletion:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 'OpsAutomatorCompletionRule.Arn'
  Ec2StateEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'Ops Automator - Rule for CloudWatch EC2 events for stack
        ${AWS::StackName}'
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - Ec2StateEventRule
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - running
            - stopped
            - terminated
      Targets:
        - Arn: !Ref 'OpsAutomatorEventsTopic'
          Id: EC2StateEventsToTopic
  EbsSnapshotEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'Ops Automator - Rule for CloudWatch EBS events for stack
        ${AWS::StackName}'
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - EbsSnapshotEventRule
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EBS Snapshot Notification
        detail:
          event:
            - copySnapshot
            - createSnapshot
            - shareSnapshot
          result:
            - succeeded
      Targets:
        - Arn: !Ref 'OpsAutomatorEventsTopic'
          Id: EbsSnapshotEventsToTopic
  CloudTrailRdsEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'Ops Automator - Rule for CloudTrail events for stack ${AWS::StackName}'
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - CloudTrailRdsEventRule
      EventPattern:
        source:
          - aws.rds
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - rds.amazonaws.com
          eventName:
            - CreateDBCluster
            - CreateDBInstance
            - DeleteDBCluster
            - DeleteDBInstance
            - RestoreDBClusterSnapshot
            - RestoreDBInstanceFromDBSnapshot
            - StartDBCluster
            - StartDBInstance
            - StartDBInstance
            - StopDBCluster
            - StopDBInstance
      Targets:
        - Arn: !Ref 'OpsAutomatorEventsTopic'
          Id: CloudTrailRdsEventsToTopic
  TagChangeEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'Ops Automator - Rule for tag change events for stack ${AWS::StackName}'
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - TaggingEventRule
      EventPattern:
        source:
          - aws.tag
        detail-type:
          - Tag Change on Resource
        detail:
          service:
            - ec2
            - rds
          resource-type:
            - instance
            - volume
            - snapshot
            - image
            - db
            - cluster
      Targets:
        - Arn: !Ref 'OpsAutomatorEventsTopic'
          Id: TagChangeEventsToTopic
  OpsAutomatorExportTask:
    Type: Custom::TaskConfig
    Properties:
      ServiceToken: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      Timeout: '300'
      Name: TaskTableExport
      Description: Internal task for exporting task tracking table to S3, do not delete
      Parameters:
        S3Bucket: !Ref 'Configuration'
        S3Prefix: Exports/
      Interval: 59 0/4 * * ?
      Internal: 'True'
      Action: SchedulerTaskExport
      TaskMetrics: 'False'
      Enabled: !If
        - EnableTaskExportCondition
        - 'True'
        - 'False'
      StackId: !Ref 'AWS::StackId'
  OpsAutomatorCleanupTask:
    Type: Custom::TaskConfig
    Properties:
      ServiceToken: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      Timeout: '300'
      Name: TaskTableCleanup
      Description: Internal task for cleaning task tracking table, do not delete.
        Deletes task not deleted by TTL
      Parameters:
        TaskRetentionHours: !Ref 'TaskRetentionHours'
        RetainFailedTasks: !If
          - KeepFailedTasksCondition
          - 'True'
          - 'False'
      Interval: '0 2 * * ?'
      Internal: 'True'
      TaskMetrics: 'False'
      Action: SchedulerTaskCleanup
      Enabled: !If
        - EnableTaskCleanupCondition
        - 'True'
        - 'False'
      StackId: !Ref 'AWS::StackId'
    DependsOn:
      - OpsAutomatorExportTask
  OpsAutomatorBackupTask:
    Type: Custom::TaskConfig
    Properties:
      ServiceToken: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      Timeout: '300'
      Name: TaskConfigurationBackup
      Description: Internal task for daily backup of configuration table, do not delete
      Parameters:
        S3Bucket: !Ref 'Configuration'
        S3Prefix: Backups/
      Interval: '0 0 * * ?'
      Internal: 'True'
      TaskMetrics: 'False'
      Action: SchedulerConfigBackup
      Enabled: 'True'
      StackId: !Ref 'AWS::StackId'
    DependsOn:
      - OpsAutomatorCleanupTask
  OpsAutomatorSetupHelper:
    Type: Custom::OpsAutomatorSetupHelper
    Properties:
      ServiceToken: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      UseEcs: !If
        - UseEcs
        - 'True'
        - 'False'
      Timeout: '150'
      LogRetentionDays: !Ref 'LogRetentionDays'
      StackVersion: '%version%'
      OpsAutomatorLambdaRole: !GetAtt 'OpsAutomatorLambdaRole.Arn'
      OptimizeCrossAccountTemplate: !FindInMap
        - Settings
        - Templates
        - OptimizeCrossAccountTemplate
      EventForwardLambdaRole: !GetAtt 'OpsAutomatorEventsForwardRole.Arn'
      OpsAutomatorTopicArn: !Ref 'OpsAutomatorEventsTopic'
      DeploymentVersion: '%version%'
    DependsOn:
      - ConfigurationTable
      - TriggerTable
      - OpsAutomatorCloudWatchQueueHandlerLambda
  OpsAutomatorRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'Ops Automator - Rule to trigger scheduled tasks for stack
        ${AWS::StackName}'
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - OpsAutomatorRule
      ScheduleExpression: cron(0/1 * * * ? *)
      State: !FindInMap
        - EnabledDisabled
        - !Ref 'SchedulerActive'
        - Value
      Targets:
        - Id: OpsAutomator
          Arn: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
  OpsAutomatorCompletionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'Ops Automator - Rule to trigger completion checks for stack
        ${AWS::StackName}'
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - OpsAutomatorCompletionRule
      ScheduleExpression: cron(0/1 * * * ? *)
      State: ENABLED
      Targets:
        - Id: OpsAutomatorCompletion
          Arn: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
  ActionEventMappingTaskTracking:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 20
      Enabled: true
      EventSourceArn: !GetAtt 'TaskTrackingTable.StreamArn'
      FunctionName: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      StartingPosition: TRIM_HORIZON
    DependsOn: OpsAutomatorLambdaRole
  ActionEventMappingConcurrencyTable:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt 'ConcurrencyTable.StreamArn'
      FunctionName: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      StartingPosition: TRIM_HORIZON
    DependsOn: OpsAutomatorLambdaRole
  ActionEventMappingConfiguration:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 20
      Enabled: true
      EventSourceArn: !GetAtt 'ConfigurationTable.StreamArn'
      FunctionName: !GetAtt 'OpsAutomatorLambdaFunctionStandard.Arn'
      StartingPosition: TRIM_HORIZON
  ActionEventMappingTriggerTable:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt 'TriggerTable.StreamArn'
      FunctionName: !GetAtt 'OpsAutomatorCloudWatchQueueHandlerLambda.Arn'
      StartingPosition: TRIM_HORIZON
  OpsAutomatorEcsRepository:
    Condition: UseEcs
    Type: AWS::ECR::Repository
  ResourceEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting Ops Automator resource data
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - !Sub 'arn:${AWS::Partition}:iam::'
                  - !Ref 'AWS::AccountId'
                  - :root
            Action: kms:*
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt 'OpsAutomatorLambdaRole.Arn'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
    Condition: EncryptResourceData
  ResourceEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}-ResourceEncryptionKey'
      TargetKeyId: !Ref 'ResourceEncryptionKey'
    Condition: EncryptResourceData
  OpsAutomatorLambdaFunctionMedium:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: %bucket%
        S3Key: ops-automator/%version%/ops-automator-%version%.zip
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          - Medium
      Handler: main.lambda_handler
      Runtime: python2.7
      Role: !GetAtt 'OpsAutomatorLambdaRole.Arn'
      Environment:
        Variables:
          LAST_SCHEDULER_RUN_TABLE: !Ref 'LastSchedulerExecutionTable'
          RESOURCE_BUCKET: !Ref 'TaskResources'
          RESOURCE_TO_S3_SIZE: !FindInMap
            - Settings
            - Resources
            - ResourceToS3SizeKB
          ACTION_TRACKING_TABLE: !Ref 'TaskTrackingTable'
          CONFIG_TABLE: !Ref 'ConfigurationTable'
          CONFIG_BUCKET: !Ref 'Configuration'
          REPORTING_BUCKET: !Ref 'Reporting'
          CONCURRENCY_TABLE: !Ref 'ConcurrencyTable'
          TASKLIST_TAG_NAME: !Ref 'TagName'
          LOG_GROUP: !Ref 'OpsAutomatorLogGroup'
          CLOUDWATCH_TRIGGER_TABLE: !Ref 'TriggerTable'
          LOGGING_QUEUE_URL: !Ref 'OpsAutomatorCloudWatchQueue'
          LAMBDA_NAME: !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          STACK_NAME: !Ref 'AWS::StackName'
          STACK_ID: !Ref 'AWS::StackId'
          OPS_AUTOMATOR_ACCOUNT: !Ref 'AWS::AccountId'
          OPS_AUTOMATOR_ROLE_ARN: !GetAtt 'OpsAutomatorLambdaRole.Arn'
          LAMBDA_TIMEOUT: 900
          TASK_CLEANUP_ENABLED: !If
            - EnableTaskCleanupCondition
            - 'True'
            - 'False'
          TASK_RETENTION_HOURS: !Ref 'TaskRetentionHours'
          KEEP_FAILED_TASKS: !If
            - KeepFailedTasksCondition
            - 'True'
            - 'False'
          USER_AGENT: !Join
            - '-'
            - - OpsAutomator
              - !Ref 'AWS::StackName'
              - '%version%'
          SEND_METRICS: !FindInMap
            - YesNoBoolean
            - !FindInMap
              - Send
              - AnonymousUsage
              - Data
            - Value
          OPS_AUTOMATOR_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorRule
          COMPLETION_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorCompletionRule
          SNS_ISSUES_TOPIC_ARN: !Ref 'OpsAutomatorIssuesTopic'
          SNS_RESULT_TOPIC_ARN: !Ref 'OpsAutomatorNotificationsTopic'
          EVENTS_TOPIC_ARN: !Ref 'OpsAutomatorEventsTopic'
          BOTO_RETRY_STATS: 'False'
          BOTO_RETRY_OUTPUT: 'False'
          CLOUDWATCH_METRICS: !FindInMap
            - YesNoBoolean
            - !Ref 'UseCloudWatchMetrics'
            - Value
          USE_ECS: !If
            - UseEcs
            - 'True'
            - 'False'
          ECS_CLUSTER: !If
            - UseEcs
            - !FindInMap
              - Settings
              - EcsCluster
              - ClusterName
            - !Ref 'AWS::NoValue'
          ECS_OPS_AUTOMATOR_TASK: !If
            - UseEcs
            - !Ref 'OpsAutomatorTask'
            - ''
          DEBUG_TASK_TRACKING_HANDLER: 'False'
          DEBUG_MAIN_EVENT_HANDLER: 'False'
          DEBUG_EVENT_HANDLERS: 'False'
          RESOURCE_ENCRYPTION_KEY: !If
            - EncryptResourceData
            - !Ref 'ResourceEncryptionKey'
            - ''
          SERVICE_LIMIT_CONCURRENT_EBS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentEbsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_RDS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentRdsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_IMAGE_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentImageCopies
          SOLUTION_ID: !FindInMap
            - Settings
            - Metrics
            - SolutionId
          METRICS_URL: !FindInMap
            - Settings
            - Metrics
            - Url
      MemorySize: '256'
      Timeout: 900
      Description: Ops Automator (Medium, Memory 256 MB), version %version%
    DependsOn:
      - OpsAutomatorLambdaRole
  OpsAutomatorLambdaFunctionLarge:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: %bucket%
        S3Key: ops-automator/%version%/ops-automator-%version%.zip
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          - Large
      Handler: main.lambda_handler
      Runtime: python2.7
      Role: !GetAtt 'OpsAutomatorLambdaRole.Arn'
      Environment:
        Variables:
          LAST_SCHEDULER_RUN_TABLE: !Ref 'LastSchedulerExecutionTable'
          RESOURCE_BUCKET: !Ref 'TaskResources'
          RESOURCE_TO_S3_SIZE: !FindInMap
            - Settings
            - Resources
            - ResourceToS3SizeKB
          ACTION_TRACKING_TABLE: !Ref 'TaskTrackingTable'
          CONFIG_TABLE: !Ref 'ConfigurationTable'
          CONFIG_BUCKET: !Ref 'Configuration'
          REPORTING_BUCKET: !Ref 'Reporting'
          CONCURRENCY_TABLE: !Ref 'ConcurrencyTable'
          TASKLIST_TAG_NAME: !Ref 'TagName'
          LOG_GROUP: !Ref 'OpsAutomatorLogGroup'
          CLOUDWATCH_TRIGGER_TABLE: !Ref 'TriggerTable'
          LOGGING_QUEUE_URL: !Ref 'OpsAutomatorCloudWatchQueue'
          LAMBDA_NAME: !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          STACK_NAME: !Ref 'AWS::StackName'
          STACK_ID: !Ref 'AWS::StackId'
          OPS_AUTOMATOR_ACCOUNT: !Ref 'AWS::AccountId'
          OPS_AUTOMATOR_ROLE_ARN: !GetAtt 'OpsAutomatorLambdaRole.Arn'
          LAMBDA_TIMEOUT: 900
          TASK_CLEANUP_ENABLED: !If
            - EnableTaskCleanupCondition
            - 'True'
            - 'False'
          TASK_RETENTION_HOURS: !Ref 'TaskRetentionHours'
          KEEP_FAILED_TASKS: !If
            - KeepFailedTasksCondition
            - 'True'
            - 'False'
          USER_AGENT: !Join
            - '-'
            - - OpsAutomator
              - !Ref 'AWS::StackName'
              - '%version%'
          SEND_METRICS: !FindInMap
            - YesNoBoolean
            - !FindInMap
              - Send
              - AnonymousUsage
              - Data
            - Value
          OPS_AUTOMATOR_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorRule
          COMPLETION_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorCompletionRule
          SNS_ISSUES_TOPIC_ARN: !Ref 'OpsAutomatorIssuesTopic'
          SNS_RESULT_TOPIC_ARN: !Ref 'OpsAutomatorNotificationsTopic'
          EVENTS_TOPIC_ARN: !Ref 'OpsAutomatorEventsTopic'
          BOTO_RETRY_STATS: 'False'
          BOTO_RETRY_OUTPUT: 'False'
          CLOUDWATCH_METRICS: !FindInMap
            - YesNoBoolean
            - !Ref 'UseCloudWatchMetrics'
            - Value
          USE_ECS: !If
            - UseEcs
            - 'True'
            - 'False'
          ECS_CLUSTER: !If
            - UseEcs
            - !FindInMap
              - Settings
              - EcsCluster
              - ClusterName
            - !Ref 'AWS::NoValue'
          ECS_OPS_AUTOMATOR_TASK: !If
            - UseEcs
            - !Ref 'OpsAutomatorTask'
            - ''
          DEBUG_TASK_TRACKING_HANDLER: 'False'
          DEBUG_MAIN_EVENT_HANDLER: 'False'
          DEBUG_EVENT_HANDLERS: 'False'
          RESOURCE_ENCRYPTION_KEY: !If
            - EncryptResourceData
            - !Ref 'ResourceEncryptionKey'
            - ''
          SERVICE_LIMIT_CONCURRENT_EBS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentEbsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_RDS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentRdsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_IMAGE_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentImageCopies
          SOLUTION_ID: !FindInMap
            - Settings
            - Metrics
            - SolutionId
          METRICS_URL: !FindInMap
            - Settings
            - Metrics
            - Url
      MemorySize: '512'
      Timeout: 900
      Description: Ops Automator (Large, Memory 512 MB), version %version%
    DependsOn:
      - OpsAutomatorLambdaRole
  OpsAutomatorLambdaFunctionXLarge:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: %bucket%
        S3Key: ops-automator/%version%/ops-automator-%version%.zip
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          - XLarge
      Handler: main.lambda_handler
      Runtime: python2.7
      Role: !GetAtt 'OpsAutomatorLambdaRole.Arn'
      Environment:
        Variables:
          LAST_SCHEDULER_RUN_TABLE: !Ref 'LastSchedulerExecutionTable'
          RESOURCE_BUCKET: !Ref 'TaskResources'
          RESOURCE_TO_S3_SIZE: !FindInMap
            - Settings
            - Resources
            - ResourceToS3SizeKB
          ACTION_TRACKING_TABLE: !Ref 'TaskTrackingTable'
          CONFIG_TABLE: !Ref 'ConfigurationTable'
          CONFIG_BUCKET: !Ref 'Configuration'
          REPORTING_BUCKET: !Ref 'Reporting'
          CONCURRENCY_TABLE: !Ref 'ConcurrencyTable'
          TASKLIST_TAG_NAME: !Ref 'TagName'
          LOG_GROUP: !Ref 'OpsAutomatorLogGroup'
          CLOUDWATCH_TRIGGER_TABLE: !Ref 'TriggerTable'
          LOGGING_QUEUE_URL: !Ref 'OpsAutomatorCloudWatchQueue'
          LAMBDA_NAME: !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          STACK_NAME: !Ref 'AWS::StackName'
          STACK_ID: !Ref 'AWS::StackId'
          OPS_AUTOMATOR_ACCOUNT: !Ref 'AWS::AccountId'
          OPS_AUTOMATOR_ROLE_ARN: !GetAtt 'OpsAutomatorLambdaRole.Arn'
          LAMBDA_TIMEOUT: 900
          TASK_CLEANUP_ENABLED: !If
            - EnableTaskCleanupCondition
            - 'True'
            - 'False'
          TASK_RETENTION_HOURS: !Ref 'TaskRetentionHours'
          KEEP_FAILED_TASKS: !If
            - KeepFailedTasksCondition
            - 'True'
            - 'False'
          USER_AGENT: !Join
            - '-'
            - - OpsAutomator
              - !Ref 'AWS::StackName'
              - '%version%'
          SEND_METRICS: !FindInMap
            - YesNoBoolean
            - !FindInMap
              - Send
              - AnonymousUsage
              - Data
            - Value
          OPS_AUTOMATOR_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorRule
          COMPLETION_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorCompletionRule
          SNS_ISSUES_TOPIC_ARN: !Ref 'OpsAutomatorIssuesTopic'
          SNS_RESULT_TOPIC_ARN: !Ref 'OpsAutomatorNotificationsTopic'
          EVENTS_TOPIC_ARN: !Ref 'OpsAutomatorEventsTopic'
          BOTO_RETRY_STATS: 'False'
          BOTO_RETRY_OUTPUT: 'False'
          CLOUDWATCH_METRICS: !FindInMap
            - YesNoBoolean
            - !Ref 'UseCloudWatchMetrics'
            - Value
          USE_ECS: !If
            - UseEcs
            - 'True'
            - 'False'
          ECS_CLUSTER: !If
            - UseEcs
            - !FindInMap
              - Settings
              - EcsCluster
              - ClusterName
            - !Ref 'AWS::NoValue'
          ECS_OPS_AUTOMATOR_TASK: !If
            - UseEcs
            - !Ref 'OpsAutomatorTask'
            - ''
          DEBUG_TASK_TRACKING_HANDLER: 'False'
          DEBUG_MAIN_EVENT_HANDLER: 'False'
          DEBUG_EVENT_HANDLERS: 'False'
          RESOURCE_ENCRYPTION_KEY: !If
            - EncryptResourceData
            - !Ref 'ResourceEncryptionKey'
            - ''
          SERVICE_LIMIT_CONCURRENT_EBS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentEbsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_RDS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentRdsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_IMAGE_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentImageCopies
          SOLUTION_ID: !FindInMap
            - Settings
            - Metrics
            - SolutionId
          METRICS_URL: !FindInMap
            - Settings
            - Metrics
            - Url
      MemorySize: '1024'
      Timeout: 900
      Description: Ops Automator (XLarge, Memory 1024 MB), version %version%
    DependsOn:
      - OpsAutomatorLambdaRole
  OpsAutomatorLambdaFunctionXXLarge:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: %bucket%
        S3Key: ops-automator/%version%/ops-automator-%version%.zip
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          - XXLarge
      Handler: main.lambda_handler
      Runtime: python2.7
      Role: !GetAtt 'OpsAutomatorLambdaRole.Arn'
      Environment:
        Variables:
          LAST_SCHEDULER_RUN_TABLE: !Ref 'LastSchedulerExecutionTable'
          RESOURCE_BUCKET: !Ref 'TaskResources'
          RESOURCE_TO_S3_SIZE: !FindInMap
            - Settings
            - Resources
            - ResourceToS3SizeKB
          ACTION_TRACKING_TABLE: !Ref 'TaskTrackingTable'
          CONFIG_TABLE: !Ref 'ConfigurationTable'
          CONFIG_BUCKET: !Ref 'Configuration'
          REPORTING_BUCKET: !Ref 'Reporting'
          CONCURRENCY_TABLE: !Ref 'ConcurrencyTable'
          TASKLIST_TAG_NAME: !Ref 'TagName'
          LOG_GROUP: !Ref 'OpsAutomatorLogGroup'
          CLOUDWATCH_TRIGGER_TABLE: !Ref 'TriggerTable'
          LOGGING_QUEUE_URL: !Ref 'OpsAutomatorCloudWatchQueue'
          LAMBDA_NAME: !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          STACK_NAME: !Ref 'AWS::StackName'
          STACK_ID: !Ref 'AWS::StackId'
          OPS_AUTOMATOR_ACCOUNT: !Ref 'AWS::AccountId'
          OPS_AUTOMATOR_ROLE_ARN: !GetAtt 'OpsAutomatorLambdaRole.Arn'
          LAMBDA_TIMEOUT: 900
          TASK_CLEANUP_ENABLED: !If
            - EnableTaskCleanupCondition
            - 'True'
            - 'False'
          TASK_RETENTION_HOURS: !Ref 'TaskRetentionHours'
          KEEP_FAILED_TASKS: !If
            - KeepFailedTasksCondition
            - 'True'
            - 'False'
          USER_AGENT: !Join
            - '-'
            - - OpsAutomator
              - !Ref 'AWS::StackName'
              - '%version%'
          SEND_METRICS: !FindInMap
            - YesNoBoolean
            - !FindInMap
              - Send
              - AnonymousUsage
              - Data
            - Value
          OPS_AUTOMATOR_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorRule
          COMPLETION_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorCompletionRule
          SNS_ISSUES_TOPIC_ARN: !Ref 'OpsAutomatorIssuesTopic'
          SNS_RESULT_TOPIC_ARN: !Ref 'OpsAutomatorNotificationsTopic'
          EVENTS_TOPIC_ARN: !Ref 'OpsAutomatorEventsTopic'
          BOTO_RETRY_STATS: 'False'
          BOTO_RETRY_OUTPUT: 'False'
          CLOUDWATCH_METRICS: !FindInMap
            - YesNoBoolean
            - !Ref 'UseCloudWatchMetrics'
            - Value
          USE_ECS: !If
            - UseEcs
            - 'True'
            - 'False'
          ECS_CLUSTER: !If
            - UseEcs
            - !FindInMap
              - Settings
              - EcsCluster
              - ClusterName
            - !Ref 'AWS::NoValue'
          ECS_OPS_AUTOMATOR_TASK: !If
            - UseEcs
            - !Ref 'OpsAutomatorTask'
            - ''
          DEBUG_TASK_TRACKING_HANDLER: 'False'
          DEBUG_MAIN_EVENT_HANDLER: 'False'
          DEBUG_EVENT_HANDLERS: 'False'
          RESOURCE_ENCRYPTION_KEY: !If
            - EncryptResourceData
            - !Ref 'ResourceEncryptionKey'
            - ''
          SERVICE_LIMIT_CONCURRENT_EBS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentEbsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_RDS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentRdsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_IMAGE_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentImageCopies
          SOLUTION_ID: !FindInMap
            - Settings
            - Metrics
            - SolutionId
          METRICS_URL: !FindInMap
            - Settings
            - Metrics
            - Url
      MemorySize: '2048'
      Timeout: 900
      Description: Ops Automator (XXLarge, Memory 2048 MB), version %version%
    DependsOn:
      - OpsAutomatorLambdaRole
  OpsAutomatorLambdaFunctionXXXLarge:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: %bucket%
        S3Key: ops-automator/%version%/ops-automator-%version%.zip
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          - XXXLarge
      Handler: main.lambda_handler
      Runtime: python2.7
      Role: !GetAtt 'OpsAutomatorLambdaRole.Arn'
      Environment:
        Variables:
          LAST_SCHEDULER_RUN_TABLE: !Ref 'LastSchedulerExecutionTable'
          RESOURCE_BUCKET: !Ref 'TaskResources'
          RESOURCE_TO_S3_SIZE: !FindInMap
            - Settings
            - Resources
            - ResourceToS3SizeKB
          ACTION_TRACKING_TABLE: !Ref 'TaskTrackingTable'
          CONFIG_TABLE: !Ref 'ConfigurationTable'
          CONFIG_BUCKET: !Ref 'Configuration'
          REPORTING_BUCKET: !Ref 'Reporting'
          CONCURRENCY_TABLE: !Ref 'ConcurrencyTable'
          TASKLIST_TAG_NAME: !Ref 'TagName'
          LOG_GROUP: !Ref 'OpsAutomatorLogGroup'
          CLOUDWATCH_TRIGGER_TABLE: !Ref 'TriggerTable'
          LOGGING_QUEUE_URL: !Ref 'OpsAutomatorCloudWatchQueue'
          LAMBDA_NAME: !FindInMap
            - Settings
            - Names
            - OpsAutomatorLambdaFunction
          STACK_NAME: !Ref 'AWS::StackName'
          STACK_ID: !Ref 'AWS::StackId'
          OPS_AUTOMATOR_ACCOUNT: !Ref 'AWS::AccountId'
          OPS_AUTOMATOR_ROLE_ARN: !GetAtt 'OpsAutomatorLambdaRole.Arn'
          LAMBDA_TIMEOUT: 900
          TASK_CLEANUP_ENABLED: !If
            - EnableTaskCleanupCondition
            - 'True'
            - 'False'
          TASK_RETENTION_HOURS: !Ref 'TaskRetentionHours'
          KEEP_FAILED_TASKS: !If
            - KeepFailedTasksCondition
            - 'True'
            - 'False'
          USER_AGENT: !Join
            - '-'
            - - OpsAutomator
              - !Ref 'AWS::StackName'
              - '%version%'
          SEND_METRICS: !FindInMap
            - YesNoBoolean
            - !FindInMap
              - Send
              - AnonymousUsage
              - Data
            - Value
          OPS_AUTOMATOR_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorRule
          COMPLETION_RULE: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - !FindInMap
                - Settings
                - Names
                - OpsAutomatorCompletionRule
          SNS_ISSUES_TOPIC_ARN: !Ref 'OpsAutomatorIssuesTopic'
          SNS_RESULT_TOPIC_ARN: !Ref 'OpsAutomatorNotificationsTopic'
          EVENTS_TOPIC_ARN: !Ref 'OpsAutomatorEventsTopic'
          BOTO_RETRY_STATS: 'False'
          BOTO_RETRY_OUTPUT: 'False'
          CLOUDWATCH_METRICS: !FindInMap
            - YesNoBoolean
            - !Ref 'UseCloudWatchMetrics'
            - Value
          USE_ECS: !If
            - UseEcs
            - 'True'
            - 'False'
          ECS_CLUSTER: !If
            - UseEcs
            - !FindInMap
              - Settings
              - EcsCluster
              - ClusterName
            - !Ref 'AWS::NoValue'
          ECS_OPS_AUTOMATOR_TASK: !If
            - UseEcs
            - !Ref 'OpsAutomatorTask'
            - ''
          DEBUG_TASK_TRACKING_HANDLER: 'False'
          DEBUG_MAIN_EVENT_HANDLER: 'False'
          DEBUG_EVENT_HANDLERS: 'False'
          RESOURCE_ENCRYPTION_KEY: !If
            - EncryptResourceData
            - !Ref 'ResourceEncryptionKey'
            - ''
          SERVICE_LIMIT_CONCURRENT_EBS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentEbsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_RDS_SNAPSHOT_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentRdsSnapshotCopies
          SERVICE_LIMIT_CONCURRENT_IMAGE_COPY: !FindInMap
            - Settings
            - ServiceLimits
            - MaxConcurrentImageCopies
          SOLUTION_ID: !FindInMap
            - Settings
            - Metrics
            - SolutionId
          METRICS_URL: !FindInMap
            - Settings
            - Metrics
            - Url
      MemorySize: '3008'
      Timeout: 900
      Description: Ops Automator (XXXLarge, Memory 3008 MB), version %version%
    DependsOn:
      - OpsAutomatorLambdaRole
Outputs:
  OpsAutomatorLambdaFunctionStandard:
    Value: !Ref 'OpsAutomatorLambdaFunctionStandard'
    Description: Name of Ops Automator lambda function
  LogGroup:
    Value: !Ref 'OpsAutomatorLogGroup'
    Description: Name of the CloudWatch loggroup for Ops Automator stack
  ConfigurationBucketName:
    Value: !Ref 'Configuration'
    Description: Name of bucket with generated CloudFormation templates for managing
      tasks and creating cross account roles and backups
  ReportingBucketName:
    Value: !Ref 'Reporting'
    Description: Name of bucket for output reports of Ops Automator tasks
  IssueSNSTopic:
    Value: !Ref 'OpsAutomatorIssuesTopic'
    Description: Topic to subscribe to for notifications of errors and warnings
  NotificationsSNSTopic:
    Value: !Ref 'OpsAutomatorNotificationsTopic'
    Description: Topic to subscribe to for notifications of started and ended tasks
  StackId:
    Value: !Ref 'AWS::StackId'
    Description: StackID
  EventsForwardRoleParam:
    Value: !GetAtt 'OpsAutomatorEventsForwardRole.Arn'
    Description: Role for forwarding events from other regions
  Repository:
    Value: !If
      - UseEcs
      - !Sub
        - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${repository}
        - repository: !Ref 'OpsAutomatorEcsRepository'
      - ''
